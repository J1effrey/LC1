package com.yyf.codesignal;

import java.util.HashSet;
import java.util.Set;
/**
 * You are given two integer arrays a, b and one array of distinct integers c.
 * Your task is to check whether b is the longest contiguous subarray of a consisting only of elements from c, i.e.
 * 	1. Each of the elements of b belong to c,
 * 	2. a contains b as a contiguous subarray,
 * 	3. b is the longest of the contiguous subarrays of a which satisfy the first two conditions.
 *
 * Return true if all the above conditions are met, and false otherwise.
 * NOTE: If there is a tie for the longest contiguous subarrays of a consisting of elements from c, the answer is still considered true if b is one of these longest contiguous subarrays.
 */
public class IsMaxContiguousSubarray {
    public static void main(String[] args) {


        int[] a = {1, 2, 2, 3, 2, 1, 3};
        int[] b = {3, 2, 1, 3};
        int[] c = {2, 1, 3};
        System.out.println(solution(a, b, c));
    }

    static boolean solution(int[] a, int[] b, int[] c) {
        if (isNotContained(b, c) || (!isNotContained(a, c) && a.length > b.length)) return false;
        Set<Integer> set = new HashSet<>();
        for (int num : c) {
            set.add(num);
        }
        int len1 = a.length;
        int len2 = b.length;
        boolean flag = true;
        boolean isContained = false;
        for (int m = len1 - len2; m >= 0; m--) {
            int i;
            int j;
            for (i = m, j = 0; i < len1 && j < len2; i++, j++) {
                if (a[i] != b[j]) {
                    break;
                }
            }
            if (j != len2) {
                continue;
            }
            isContained = true;
            if ((m > 0 && set.contains(a[m - 1])) || (i < len1 && set.contains(a[i]))) {
                flag = false;
            }
        }
        return isContained && flag;
    }

    static boolean isNotContained(int[] b, int[] c) {
        Set<Integer> set = new HashSet<>();
        for (int num : c) {
            set.add(num);
        }
        for (int num : b) {
            if (!set.contains(num)) {
                return true;
            }
        }
        return false;
    }
}
/*
* Example
	• For a = [1, 1, 5, 1, 2], b = [1, 2], and c = [2, 1], the output should be solution(a, b, c) = true.
All three conditions are met:
		1. All of the elements of b belong to c,
		2. a contains b as a contiguous subarray (a[3..4] = b),
		3. b is the longest of these contiguous subarrays. To prove this, let's look at all the contiguous subarrays of length greater than 2:
		○ a[0..2] = [1, 1, 5] contains 5, which doesn't belong to c.
		○ a[0..3] = [1, 1, 5, 1] contains 5, which doesn't belong to c.
		○ a[0..4] = [1, 1, 5, 1, 2] contains 5, which doesn't belong to c.
		○ a[1..3] = [1, 5, 1] contains 5, which doesn't belong to c.
		○ a[1..4] = [1, 5, 1, 2] contains 5, which doesn't belong to c.
		○ a[2..4] = [5, 1, 2] contains 5, which doesn't belong to c.
Therefore b is the longest contiguous subarray of a consisting only of elements from c, so the answer is true.
	• For a = [1, 2, 3, 6, 1, 1, 1], b = [1, 2, 3], and c = [2, 1], the output should be solution(a, b, c) = false.
Although b is a contiguous subarray of a, it contains the element b[2] = 3 which does not appear in c, therefore it does not meet the conditions. So the answer is false.
	• For a = [1, 2, 2, 3, 2, 1, 3], b = [3, 2, 1, 3], and c = [2, 1, 3], the output should be solution(a, b, c) = false.
All of the elements of a belong to c, and b.length < a.length, so b couldn't possibly be the longest contiguous subarray consisting of elements from c. So, the answer is false.
* */

/*
testcase:
int[] a = {172503522, 101838448, 456959544, 994073627, 166593906, 913013699, 951994017, 822672196, 588579984, 338715740, 141617383, 597972454};
int[] b = {588579984, 338715740, 141617383, 597972454};
int[] c = {431376835,686197585,459381587,119279234,277832280,787102063,677893112,395945941,338715740,518342597,142231121,297528024,166510985,927106275,695845767,768198507,927584582,823723462,614825052,870831996,362657575,44438325,700929886,453445464,909638964,212346219,423910862,588579984,34296923,963545839,625208018,633281187,764017607,749627595,232754624,796154667,697198237,313266914,471282119,28568724,853612785,745822490,683080970,648036765,839217124,504537903,649227575,597605703,981395981,506578873,171486878,659900056,979587701,314693853,969993600,60773805,835070029,92464691,239375510,535674917,938029869,590196106,866305716,574426691,946739088,138338782,996434674,462122800,766509485,214701193,469757775,951801106,913013699,712059990,750220790,260599590,547758925,840224381,310330595,284556661,568533310,887701933,985233575,481528381,342812842,695980367,393363429,11028061,176663661,364092577,769259276,920623722,103691371,652924799,123588886,623716052,394849140,354297523,101555707,166045381,236652571,830866274,701168923,613359616,303773246,679746540,21428129,239592755,822672196,529440940,38867147,851651399,566685096,867096460,166339340,77584030,177856258,611067333,188566850,420636782,902496528,618877943,324538520,574224896,292138625,378567514,923446321,627740982,721838170,506496154,613256799,588558469,839716437,206929744,29706327,157737710,3115928,858824131,101838448,542575248,291966649,233114181,533598281,965017950,734094977,501101861,597972454,690216349,903685015,889946932,104734539,312863455,809257,994073627,242402263,703883074,206984183,166593906,466824314,394581852,549326750,818473385,78725063,916324956,175057231,28962713,732047258,297699698,141617383,170452268,450788888,577948911,487977863,483679666,115448253,818175173,456959544,360633685,461206369,951994017,731325772,836083339,875293831,378372271,68188141,546089527,13322006,15599766,455027484,256174960,705840098,467998558,97721245,30011008,125031174,605878557,148374089,995791182,234128701,435370537,645177578,339861797,748226309,760468767};

int[] a = {1000,1000,1000,1000};
int[] b = {1000,0,1000,0};
int[] c = {1000,0};

int[] a = {549218566,187604091,601655556,549114877,788445302,818062433,588751548,48972608,968050454,218449522,788668032,761416085,32601858,153382406,663261738,923429767,857606675,842942732,125497764,877388693};
int[] b = {48972608,968050454,218449522,788668032,761416085,32601858,153382406,663261738,923429767,857606675};
int[] c = {126466067,460597114,752507175,382912186,563515761,421490317,49238607,493706413,789847152,546448832,181772651,517602529,855345530,240105186,179540801,587497182,763748624,860275874,769172014,527925000,26848919,481825172,242007582,663261738,273136951,756330317,129993430,114696813,788668032,248960964,12145488,970293987,852175774,963348057,924472673,500623660,514649566,853853348,153382406,48972608,586035137,415855055,833878733,470949137,725181063,56313301,987695286,560841372,668692564,556846562,203711687,857606675,285130230,728773765,466634502,675233830,113423049,479843724,988363811,614837101,681966121,376829935,302596761,895027275,523514012,915713277,673472697,925905382,261745523,880769654,628070142,22537488,930284877,241921093,553224850,387692019,132422884,742862044,108385773,984716753,49805919,768244789,73684954,154208081,255006562,2074518,17422677,32601858,42164930,887466982,913017912,106191350,968050454,139729559,622875100,696124965,411409362,552607428,349778025,156409863,698849873,762407975,206036096,214226948,926600230,983937639,815237071,758360745,581429005,118342224,270799024,504478212,488000995,480949988,218449522,332445896,445590142,771624351,280990447,739297253,797012469,493508062,841531893,298646980,172388213,804621138,311138815,874392277,53241353,608847539,946471820,218856977,231912724,130716042,962890176,322648487,147260449,143611718,744026251,14663481,14576636,568002020,736470146,596002300,42633809,966619901,767231534,313049921,23025717,789933790,514259438,276316928,698688445,246792206,370489515,858700740,472414775,322148906,74792081,736216502,21092714,438632228,207077949,692459394,340488845,390067620,784529143,522920907,532668104,886516603,782910395,497598863,689552515,12318995,108963778,330457904,697100701,295791711,722935230,762211940,923429767,639090259,200565434,343167168,227603938,105124154,286380107,761416085,952681921,848998311,71042285,316125010,708777683,212125598,753722768,556956623,474792296,697468842,31824499,371046339,471849170,150722789,150217669,91964981,226788453,843520913,473012005,33277024,858396601,119403395};

int[] a = {599498240,973573265,249253079,758376772,596192124,638701605,70604791,713386421,649323100,720303290,332414724,480448420,704328252,803931495,963608407,88570918,671571816,982675694,624305204,290576211,635948576,211063697,613256580,253142441,679097799,293191280,667275410,656803605,839140063,489243378,97342351,983641597,780584836,457237338,958217549};
int[] b = {332414724,480448420,704328252,803931495,963608407,88570918,671571816,982675694};
int[] c = {343341339,494558626,700940113,961806664,533934240,156547452,20352317,616018563,97644606,817489121,808533539,632766349,440348006,886666908,698343616,585511650,731351514,891399344,735574505,240962823,477901778,66956734,288782932,968660025,858140583,708334428,962657533,332414724,273605956,773641819,858282775,64734230,870902307,661901714,800680046,828540571,650289311,488649895,843535243,932576881,761455839,485291498,66115336,364297926,558244184,380586561,448336515,704866310,961410496,125211676,327818965,721545491,972538807,373598943,821001058,381945264,309368374,668628913,643822715,508612614,183238384,374750936,861793435,996982887,76727307,331407043,441474072,749410009,982675694,704328252,874659199,534226908,323763545,497160555,222667780,523042192,932162060,516471064,826236131,925780475,401191133,29016382,962150370,609177310,330963420,580376929,129660772,88570918,972297143,933961413,627274477,320787325,595715086,794094116,704708885,101646266,407405883,697627343,433558640,546248069,476110221,736031638,99493108,418822471,365610282,99683185,97853046,958600001,84915510,525137694,18560292,992356091,892898297,918955377,102812694,797509790,887407193,169588816,85792104,600741619,920848637,789708208,931574460,12044555,388384752,823543206,818730423,136903974,596462438,526919566,43568597,151386795,625948666,401615345,986742073,480448420,260827698,598811303,350195956,973708233,508864527,37909996,969743600,971840826,858774153,280517503,224761791,19783120,895551184,282572040,352338192,375019320,394220985,512532005,813939567,163059933,970979102,706611083,901060433,22620179,413732886,239592781,319627696,734376393,360199023,104221182,116259335,841336086,620532695,317891861,67828678,92093154,365844862,883508091,539231320,5835076,83150353,835635686,502993117,193099886,39557513,502918146,671571816,403098324,963608407,854015255,264134890,445543745,669696518,48594476,101207362,589292254,293172018,756603152,978013686,849565287,689308388,566175927,356009731,611494239,325619266,595874229,814648015,950235579,504035691,830440311,354493939,803931495};
 */
